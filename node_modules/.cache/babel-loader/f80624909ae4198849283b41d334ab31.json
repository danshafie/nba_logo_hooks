{"ast":null,"code":"var _jsxFileName = \"/Users/danshafie/home_projects/nba_logo_hooks/src/DownloadButton.js\";\nimport React from \"react\";\n\nvar DownloadButton = function DownloadButton() {\n  var exportSVG = function exportSVG(svg) {\n    // first create a clone of our svg node so we don't mess the original one\n    var clone = svg.cloneNode(true); // parse the styles\n\n    parseStyles(clone); // create a doctype\n\n    var svgDocType = document.implementation.createDocumentType(\"svg\", \"-//W3C//DTD SVG 1.1//EN\", \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\"); // a fresh svg document\n\n    var svgDoc = document.implementation.createDocument(\"http://www.w3.org/2000/svg\", \"svg\", svgDocType); // replace the documentElement with our clone\n\n    svgDoc.replaceChild(clone, svgDoc.documentElement); // get the data\n\n    var svgData = new XMLSerializer().serializeToString(svgDoc); // now you've got your svg data, the following will depend on how you want to download it\n    // e.g yo could make a Blob of it for FileSaver.js\n\n    /*\n        var blob = new Blob([svgData.replace(/></g, '>\\n\\r<')]);\n        saveAs(blob, 'myAwesomeSVG.svg');\n        */\n    // here I'll just make a simple a with download attribute\n\n    var a = document.createElement(\"a\");\n    a.href = \"data:image/svg+xml; charset=utf8, \" + encodeURIComponent(svgData.replace(/></g, \">\\n\\r<\"));\n    a.download = \"myAwesomeSVG.svg\";\n    a.innerHTML = \"download the svg file\";\n    document.body.appendChild(a);\n  };\n\n  var parseStyles = function parseStyles(svg) {\n    var styleSheets = [];\n    var i; // get the stylesheets of the document (ownerDocument in case svg is in <iframe> or <object>)\n\n    var docStyles = svg.ownerDocument.styleSheets; // transform the live StyleSheetList to an array to avoid endless loop\n\n    for (i = 0; i < docStyles.length; i++) {\n      styleSheets.push(docStyles[i]);\n    }\n\n    if (!styleSheets.length) {\n      return;\n    }\n\n    var defs = svg.querySelector(\"defs\") || document.createElementNS(\"http://www.w3.org/2000/svg\", \"defs\");\n\n    if (!defs.parentNode) {\n      svg.insertBefore(defs, svg.firstElementChild);\n    }\n\n    svg.matches = svg.matches || svg.webkitMatchesSelector || svg.mozMatchesSelector || svg.msMatchesSelector || svg.oMatchesSelector; // iterate through all document's stylesheets\n\n    for (i = 0; i < styleSheets.length; i++) {\n      var currentStyle = styleSheets[i];\n      var rules;\n\n      try {\n        rules = currentStyle.cssRules;\n      } catch (e) {\n        continue;\n      } // create a new style element\n\n\n      var style = document.createElement(\"style\"); // some stylesheets can't be accessed and will throw a security error\n\n      var l = rules && rules.length; // iterate through each cssRules of this stylesheet\n\n      for (var j = 0; j < l; j++) {\n        // get the selector of this cssRules\n        var selector = rules[j].selectorText; // probably an external stylesheet we can't access\n\n        if (!selector) {\n          continue;\n        } // is it our svg node or one of its children ?\n\n\n        if (svg.matches && svg.matches(selector) || svg.querySelector(selector)) {\n          var cssText = rules[j].cssText; // append it to our <style> node\n\n          style.innerHTML += cssText + \"\\n\";\n        }\n      } // if we got some rules\n\n\n      if (style.innerHTML) {\n        // append the style node to the clone's defs\n        defs.appendChild(style);\n      }\n    }\n  };\n\n  return React.createElement(\"a\", {\n    href: \"\",\n    onClick: runDownload,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }, \"Download\");\n};\n\nexport default DownloadButton;","map":{"version":3,"sources":["/Users/danshafie/home_projects/nba_logo_hooks/src/DownloadButton.js"],"names":["React","DownloadButton","exportSVG","svg","clone","cloneNode","parseStyles","svgDocType","document","implementation","createDocumentType","svgDoc","createDocument","replaceChild","documentElement","svgData","XMLSerializer","serializeToString","a","createElement","href","encodeURIComponent","replace","download","innerHTML","body","appendChild","styleSheets","i","docStyles","ownerDocument","length","push","defs","querySelector","createElementNS","parentNode","insertBefore","firstElementChild","matches","webkitMatchesSelector","mozMatchesSelector","msMatchesSelector","oMatchesSelector","currentStyle","rules","cssRules","e","style","l","j","selector","selectorText","cssText","runDownload"],"mappings":"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","sourcesContent":["import React from \"react\";\n\nconst DownloadButton = () => {\n  const exportSVG = svg => {\n    // first create a clone of our svg node so we don't mess the original one\n    var clone = svg.cloneNode(true);\n    // parse the styles\n    parseStyles(clone);\n\n    // create a doctype\n    var svgDocType = document.implementation.createDocumentType(\n      \"svg\",\n      \"-//W3C//DTD SVG 1.1//EN\",\n      \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\"\n    );\n    // a fresh svg document\n    var svgDoc = document.implementation.createDocument(\n      \"http://www.w3.org/2000/svg\",\n      \"svg\",\n      svgDocType\n    );\n    // replace the documentElement with our clone\n    svgDoc.replaceChild(clone, svgDoc.documentElement);\n    // get the data\n    var svgData = new XMLSerializer().serializeToString(svgDoc);\n\n    // now you've got your svg data, the following will depend on how you want to download it\n    // e.g yo could make a Blob of it for FileSaver.js\n    /*\n        var blob = new Blob([svgData.replace(/></g, '>\\n\\r<')]);\n        saveAs(blob, 'myAwesomeSVG.svg');\n        */\n    // here I'll just make a simple a with download attribute\n\n    var a = document.createElement(\"a\");\n    a.href =\n      \"data:image/svg+xml; charset=utf8, \" +\n      encodeURIComponent(svgData.replace(/></g, \">\\n\\r<\"));\n    a.download = \"myAwesomeSVG.svg\";\n    a.innerHTML = \"download the svg file\";\n    document.body.appendChild(a);\n  };\n\n  const parseStyles = svg => {\n    var styleSheets = [];\n    var i;\n    // get the stylesheets of the document (ownerDocument in case svg is in <iframe> or <object>)\n    var docStyles = svg.ownerDocument.styleSheets;\n\n    // transform the live StyleSheetList to an array to avoid endless loop\n    for (i = 0; i < docStyles.length; i++) {\n      styleSheets.push(docStyles[i]);\n    }\n\n    if (!styleSheets.length) {\n      return;\n    }\n\n    var defs =\n      svg.querySelector(\"defs\") ||\n      document.createElementNS(\"http://www.w3.org/2000/svg\", \"defs\");\n    if (!defs.parentNode) {\n      svg.insertBefore(defs, svg.firstElementChild);\n    }\n    svg.matches =\n      svg.matches ||\n      svg.webkitMatchesSelector ||\n      svg.mozMatchesSelector ||\n      svg.msMatchesSelector ||\n      svg.oMatchesSelector;\n\n    // iterate through all document's stylesheets\n    for (i = 0; i < styleSheets.length; i++) {\n      var currentStyle = styleSheets[i];\n\n      var rules;\n      try {\n        rules = currentStyle.cssRules;\n      } catch (e) {\n        continue;\n      }\n      // create a new style element\n      var style = document.createElement(\"style\");\n      // some stylesheets can't be accessed and will throw a security error\n      var l = rules && rules.length;\n      // iterate through each cssRules of this stylesheet\n      for (var j = 0; j < l; j++) {\n        // get the selector of this cssRules\n        var selector = rules[j].selectorText;\n        // probably an external stylesheet we can't access\n        if (!selector) {\n          continue;\n        }\n\n        // is it our svg node or one of its children ?\n        if (\n          (svg.matches && svg.matches(selector)) ||\n          svg.querySelector(selector)\n        ) {\n          var cssText = rules[j].cssText;\n          // append it to our <style> node\n          style.innerHTML += cssText + \"\\n\";\n        }\n      }\n      // if we got some rules\n      if (style.innerHTML) {\n        // append the style node to the clone's defs\n        defs.appendChild(style);\n      }\n    }\n  };\n  return (\n    <a href=\"\" onClick={runDownload}>\n      Download\n    </a>\n  );\n};\n\nexport default DownloadButton;\n"]},"metadata":{},"sourceType":"module"}