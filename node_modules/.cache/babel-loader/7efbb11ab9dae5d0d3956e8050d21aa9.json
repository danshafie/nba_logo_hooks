{"ast":null,"code":"var _jsxFileName = \"/Users/danshafie/home_projects/nba_logo_hooks/src/DownloadButton.js\";\nimport React from \"react\";\n\nvar DownloadButton = function DownloadButton() {\n  var exportSVG = function exportSVG(svg) {\n    // first create a clone of our svg node so we don't mess the original one\n    var clone = svg.cloneNode(true); // parse the styles\n\n    parseStyles(clone); // create a doctype\n\n    var svgDocType = document.implementation.createDocumentType(\"svg\", \"-//W3C//DTD SVG 1.1//EN\", \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\"); // a fresh svg document\n\n    var svgDoc = document.implementation.createDocument(\"http://www.w3.org/2000/svg\", \"svg\", svgDocType); // replace the documentElement with our clone\n\n    svgDoc.replaceChild(clone, svgDoc.documentElement); // get the data\n\n    var svgData = new XMLSerializer().serializeToString(svgDoc); // now you've got your svg data, the following will depend on how you want to download it\n    // e.g yo could make a Blob of it for FileSaver.js\n\n    /*\n        var blob = new Blob([svgData.replace(/></g, '>\\n\\r<')]);\n        saveAs(blob, 'myAwesomeSVG.svg');\n        */\n    // here I'll just make a simple a with download attribute\n\n    var a = document.createElement(\"a\");\n    a.href = \"data:image/svg+xml; charset=utf8, \" + encodeURIComponent(svgData.replace(/></g, \">\\n\\r<\"));\n    a.download = \"myAwesomeSVG.svg\";\n    a.innerHTML = \"download the svg file\";\n    document.body.appendChild(a);\n  };\n\n  return React.createElement(\"a\", {\n    href: \"\",\n    onClick: runDownload,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, \"Download\");\n};\n\nexport default DownloadButton;","map":{"version":3,"sources":["/Users/danshafie/home_projects/nba_logo_hooks/src/DownloadButton.js"],"names":["React","DownloadButton","exportSVG","svg","clone","cloneNode","parseStyles","svgDocType","document","implementation","createDocumentType","svgDoc","createDocument","replaceChild","documentElement","svgData","XMLSerializer","serializeToString","a","createElement","href","encodeURIComponent","replace","download","innerHTML","body","appendChild","runDownload"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AAC3B,MAAMC,SAAS,GAAG,SAAZA,SAAY,CAAAC,GAAG,EAAI;AACvB;AACA,QAAIC,KAAK,GAAGD,GAAG,CAACE,SAAJ,CAAc,IAAd,CAAZ,CAFuB,CAGvB;;AACAC,IAAAA,WAAW,CAACF,KAAD,CAAX,CAJuB,CAMvB;;AACA,QAAIG,UAAU,GAAGC,QAAQ,CAACC,cAAT,CAAwBC,kBAAxB,CACf,KADe,EAEf,yBAFe,EAGf,kDAHe,CAAjB,CAPuB,CAYvB;;AACA,QAAIC,MAAM,GAAGH,QAAQ,CAACC,cAAT,CAAwBG,cAAxB,CACX,4BADW,EAEX,KAFW,EAGXL,UAHW,CAAb,CAbuB,CAkBvB;;AACAI,IAAAA,MAAM,CAACE,YAAP,CAAoBT,KAApB,EAA2BO,MAAM,CAACG,eAAlC,EAnBuB,CAoBvB;;AACA,QAAIC,OAAO,GAAG,IAAIC,aAAJ,GAAoBC,iBAApB,CAAsCN,MAAtC,CAAd,CArBuB,CAuBvB;AACA;;AACA;;;;AAIA;;AAEA,QAAIO,CAAC,GAAGV,QAAQ,CAACW,aAAT,CAAuB,GAAvB,CAAR;AACAD,IAAAA,CAAC,CAACE,IAAF,GACE,uCACAC,kBAAkB,CAACN,OAAO,CAACO,OAAR,CAAgB,KAAhB,EAAuB,QAAvB,CAAD,CAFpB;AAGAJ,IAAAA,CAAC,CAACK,QAAF,GAAa,kBAAb;AACAL,IAAAA,CAAC,CAACM,SAAF,GAAc,uBAAd;AACAhB,IAAAA,QAAQ,CAACiB,IAAT,CAAcC,WAAd,CAA0BR,CAA1B;AACD,GAtCD;;AAuCA,SACE;AAAG,IAAA,IAAI,EAAC,EAAR;AAAW,IAAA,OAAO,EAAES,WAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF;AAKD,CA7CD;;AA+CA,eAAe1B,cAAf","sourcesContent":["import React from \"react\";\n\nconst DownloadButton = () => {\n  const exportSVG = svg => {\n    // first create a clone of our svg node so we don't mess the original one\n    var clone = svg.cloneNode(true);\n    // parse the styles\n    parseStyles(clone);\n\n    // create a doctype\n    var svgDocType = document.implementation.createDocumentType(\n      \"svg\",\n      \"-//W3C//DTD SVG 1.1//EN\",\n      \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\"\n    );\n    // a fresh svg document\n    var svgDoc = document.implementation.createDocument(\n      \"http://www.w3.org/2000/svg\",\n      \"svg\",\n      svgDocType\n    );\n    // replace the documentElement with our clone\n    svgDoc.replaceChild(clone, svgDoc.documentElement);\n    // get the data\n    var svgData = new XMLSerializer().serializeToString(svgDoc);\n\n    // now you've got your svg data, the following will depend on how you want to download it\n    // e.g yo could make a Blob of it for FileSaver.js\n    /*\n        var blob = new Blob([svgData.replace(/></g, '>\\n\\r<')]);\n        saveAs(blob, 'myAwesomeSVG.svg');\n        */\n    // here I'll just make a simple a with download attribute\n\n    var a = document.createElement(\"a\");\n    a.href =\n      \"data:image/svg+xml; charset=utf8, \" +\n      encodeURIComponent(svgData.replace(/></g, \">\\n\\r<\"));\n    a.download = \"myAwesomeSVG.svg\";\n    a.innerHTML = \"download the svg file\";\n    document.body.appendChild(a);\n  };\n  return (\n    <a href=\"\" onClick={runDownload}>\n      Download\n    </a>\n  );\n};\n\nexport default DownloadButton;\n"]},"metadata":{},"sourceType":"module"}